schema {
  query: Query
  mutation: Mutation
}

type AnswerConnection {
  pageInfo: PageInfo!
  edges: [AnswerEdge]!
}

input AnswerCreateInput {
  answer: String
  text: String
  citationUrl: String
  citationTitle: String
  questionId: ID
  clientMutationId: String
}

type AnswerCreatePayload {
  answer: AnswerNode
  clientMutationId: String
}

type AnswerEdge {
  node: AnswerNode
  cursor: String!
}

type AnswerNode implements Node {
  id: ID!
  createdAt: DateTime!
  answer: String!
  text: String!
  citationUrl: String!
  citationTitle: String!
  credibleCount: Int!
  notCredibleCount: Int!
  question: QuestionNode!
}

type AnswerNodeConnection {
  pageInfo: PageInfo!
  edges: [AnswerNodeEdge]!
}

type AnswerNodeEdge {
  node: AnswerNode
  cursor: String!
}

scalar DateTime

scalar Email

scalar GenericScalar

type Mutation {
  questionCreate(input: QuestionCreateInput!): QuestionCreatePayload
  answerCreate(input: AnswerCreateInput!): AnswerCreatePayload
  userCreate(input: UserCreateInput!): UserCreatePayload
  userUpdate(input: UserUpdateInput!): UserUpdatePayload
  tokenAuth(input: ObtainJSONWebTokenInput!): ObtainJSONWebTokenPayload
  verifyToken(input: VerifyInput!): VerifyPayload
  refreshToken(input: RefreshInput!): RefreshPayload
}

interface Node {
  id: ID!
}

input ObtainJSONWebTokenInput {
  clientMutationId: String
  username: String!
  password: String!
}

type ObtainJSONWebTokenPayload {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  clientMutationId: String
  token: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  questions(before: String, after: String, first: Int, last: Int): QuestionConnection
  answers(before: String, after: String, first: Int, last: Int): AnswerConnection
  node(id: ID!): Node
  viewer: UserType
}

type QuestionConnection {
  pageInfo: PageInfo!
  edges: [QuestionEdge]!
}

input QuestionCreateInput {
  text: String
  citationUrl: String
  citationTitle: String
  citationImageUrl: String
  clientMutationId: String
}

type QuestionCreatePayload {
  question: QuestionNode
  clientMutationId: String
}

type QuestionEdge {
  node: QuestionNode
  cursor: String!
}

type QuestionNode implements Node {
  id: ID!
  createdAt: DateTime!
  text: String!
  citationUrl: String!
  citationTitle: String!
  citationImageUrl: String!
  answers(offset: Int, before: String, after: String, first: Int, last: Int): AnswerNodeConnection!
}

input RefreshInput {
  token: String
  clientMutationId: String
}

type RefreshPayload {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  clientMutationId: String
  token: String!
}

input UserCreateInput {
  username: String!
  email: Email!
  password: String!
  clientMutationId: String
}

type UserCreatePayload {
  user: UserType
  clientMutationId: String
}

type UserType {
  id: ID!
  password: String!
  lastLogin: DateTime
  isSuperuser: Boolean!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isStaff: Boolean!
  isActive: Boolean!
  dateJoined: DateTime!
}

input UserUpdateInput {
  username: String
  email: Email
  clientMutationId: String
}

type UserUpdatePayload {
  user: UserType
  clientMutationId: String
}

input VerifyInput {
  token: String
  clientMutationId: String
}

type VerifyPayload {
  payload: GenericScalar!
  clientMutationId: String
}
